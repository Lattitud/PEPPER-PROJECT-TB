<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                        <Box name="Get Gender" id="3" localization="8" tooltip="This box returns the gender of the person in front of the robot.&#x0A;The detection fails when there are more or less than one person in front of the robot or when the timeout is exceeded.&#x0A;&#x0A;It is possible to set up the Confidence Threshold and the Timeout parameters for this box. " x="476" y="172">
                            <bitmap>media/images/box/interaction/gender.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        try:
            self.faceC = ALProxy("ALFaceCharacteristics")
            self.tts = ALProxy("ALTextToSpeech")
        except Exception as e:
            raise RuntimeError(str(e) + "Make sure you're not connected to a virtual robot." )
        self.confidence = self.getParameter("Confidence Threshold")
        self.gender = 0
        self.age = 0
        self.counter = 0
        self.bIsRunning = False
        self.delayed = []
        self.errorMes = ""
        #global variable in order to keep trace of known persons
        global knownPersons
        knownPersons = {}

    def onUnload(self):
        self.counter = 0
        self.gender = 0
        self.age = 0
        self.bIsRunning = False
        self.cancelDelays()

    def onInput_onStart(self):
        try:
            #start timer
            #import qi
            import functools
            #define a timeout delay of 20 seconds
            delay_future = qi.async(self.onTimeout, delay=20 * 1000 * 1000)
            self.delayed.append(delay_future)
            bound_clean = functools.partial(self.cleanDelay, delay_future)
            delay_future.addCallback(bound_clean)
            self.bIsRunning = True
            while self.bIsRunning:

                    try:
                        #identify user
                        ids = ALMemory.getData("PeoplePerception/PeopleList")
                        newGender = ""
                        newAge = 0
                        #on no one have been detected
                        if len(ids) == 0:
                            self.tts.say("No face detected")
                            self.errorMes = "No face detected"
                            self.onUnload()
                        #on multiple faces seen
                        elif len(ids) > 1:
                            self.tts.say("I can analyse only one face at the same time ")
                            self.errorMes = "Multiple faces detected"
                            self.onUnload()
                        #on only on face seen
                        else:
                            #to be sure of the results analysis, they will be make four times
                            if self.counter < 4:
                                #analyze properties
                                self.faceC.analyzeFaceCharacteristics(ids[0])
                                time.sleep(0.1)
                                #getting results from memory
                                gender = ALMemory.getData("PeoplePerception/Person/"+str(ids[0])+"/GenderProperties")
                                age = ALMemory.getData("PeoplePerception/Person/"+str(ids[0])+"/AgeProperties")
                                if (gender[1] > self.confidence) && (age[1] > self.confidence):
                                    self.gender += gender[0]
                                    self.age += age[0]
                                    self.counter += 1
                             else:
                                #calculate mean values
                                self.gender /= 4
                                self.age /= 4
                                if self.gender < 0.5:
                                    newGender = "female"
                                else:
                                    newGender = "male"

                                newAge = int(self.age)

                                #in case person already analyse
                                if(knownPersons.has_key(ids[0])):
                                    #get value of the key
                                    value = knownPersons.get(ids[0])
                                    #if analysis shown different result from the last one
                                    if((newGender != value[0])||(newAge != value[1]) ):
                                        self.tts.say("i was mistaken just now! you are a " + newGender + "and your are" +                         str(newAge)
                                    else:
                                        self.tts.say("your steel be a " + newGender + "and your are" + str(newAge))
                                #new person
                                else:
                                    self.tts.say("your are a " + newGender + "and your are" + str(newAge))
                                knownPersons[ids[0]] = [newGender,newAge]

                        self.onStopped(newGender)
                        self.onUnload()
                        return
                    except:
                        ids = []

            raise RuntimeError(self.errorMes)
        except Exception as e:
            raise RuntimeError(str(e))
            self.onUnload()

    def onTimeout(self):
        self.tts.say("timeout reach")
        self.errorMes = "Timeout"
        self.onUnload()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip='Returns the gender of the person in front of the robot. &#x0A;- &quot;female&quot;&#x0A;- &quot;male&quot;&#x0A;&#x0A;Tip:&#x0A;Connect this output to a &quot;Switch Case&quot; box containing the possible output values as strings. In this way you can trigger different paths in your behavior depending on the output.' id="4" />
                            <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip='Triggered when gender detection failed. &#x0A;Possible error messages:&#x0A;- &quot;No face detected&quot;&#x0A;- &quot;Multiple faces detected&quot;&#x0A;- &quot;Timeout&quot;' id="5" />
                            <Parameter name="Confidence Threshold" inherits_from_parent="0" content_type="2" value="0.35" default_value="0.6" min="0" max="1" tooltip="Set the confidence threshold for the age detection." id="6" />
                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="10" default_value="5" min="1" max="60" tooltip="" id="7" />
                        </Box>
                        <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="4" />
                        <Link inputowner="3" indexofinput="3" outputowner="3" indexofoutput="4" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
