<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                        <Box name="H-M_interaction" id="8" localization="8" tooltip="This box is a parent box contening human machine interaction behavior. While the robot detect people, he actomatically start an interaction throw games. If no one is detected, the robot lunch some animations " x="133" y="324">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="interactionStart" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                            <Input name="onInputStop" type="1" type_size="1" nature="3" inner="0" tooltip="" id="3" />
                            <Input name="interactionStop" type="1" type_size="1" nature="3" inner="0" tooltip="" id="4" />
                            <Output name="forceAnimation" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Basic Awareness" id="5" localization="8" tooltip="This box is an interface to the module ALBasicAwareness.&#x0A;&#x0A;It is a simple way to make the robot establish and keep eye contact with people.&#x0A;&#x0A;V1.1.0" x="176" y="320">
                                                <bitmap>media/images/box/tracker/basicawareness.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):

        #put initialization code here
        try:
            self.awareness = ALProxy('ALBasicAwareness')
        except Exception as e:
            self.awareness = None
            self.logger.error(e)

        self.memory = ALProxy('ALMemory')
        self.engageZone = ALProxy("ALEngagementZones")
        self.engageZone.setFirstLimitDistance(1.5)
        self.engageZone.setSecondLimitDistance(2.5)
        self.engageZone.setLimitAngle(45)
        self.isRunning = False
        self.trackedHuman = -1

        import threading
        self.subscribingLock = threading.Lock()

        self.BIND_PYTHON(self.getName(), "setParameter")


    def onUnload(self):
        if self.isRunning:
            if self.awareness:
                self.awareness.stopAwareness()
                self.setALMemorySubscription(False)
            self.isRunning = False


    def onInput_onStart(self):


        if self.isRunning:
            return # already running, nothing to do

        self.isRunning = True
        self.trackedHuman = -1
        if self.awareness:
            self.awareness.setEngagementMode(self.getParameter('Engagement Mode'))
            self.awareness.setTrackingMode(self.getParameter('Tracking Mode'))
            self.awareness.setStimulusDetectionEnabled('Sound', self.getParameter('Sound Stimulus'))
            self.awareness.setStimulusDetectionEnabled('Movement', self.getParameter('Movement Stimulus'))
            self.awareness.setStimulusDetectionEnabled('People', self.getParameter('People Stimulus'))
            self.awareness.setStimulusDetectionEnabled('Touch', self.getParameter('Touch Stimulus'))
            self.setALMemorySubscription(True)
            self.awareness.startAwareness()



    def onInput_onStop(self):
        if not self.isRunning:
            return # already stopped, nothing to do

        self.onUnload()
        self.onStopped()


    def setParameter(self, parameterName, newValue):
        GeneratedClass.setParameter(self, parameterName, newValue)

        if self.awareness:
            if parameterName == 'Sound Stimulus':
                self.awareness.setStimulusDetectionEnabled('Sound', newValue)
            elif parameterName == 'Movement Stimulus':
                self.awareness.setStimulusDetectionEnabled('Movement', newValue)
            elif parameterName == 'People Stimulus':
                self.awareness.setStimulusDetectionEnabled('People', newValue)
            elif parameterName == 'Touch Stimulus':
                self.awareness.setStimulusDetectionEnabled('Touch', newValue)


    # callbacks for ALBasicAwareness events
    def onStimulusDetected(self, eventName, stimulusName, subscriberIdentifier):
        self.StimulusDetected(stimulusName)

    def onHumanTracked(self, eventName, humanID, subscriberIdentifier):
        self.trackedHuman = humanID
        self.HumanTracked(humanID)

    def onHumanLost(self, eventName, subscriberIdentifier):
        self.HumanLost(self.trackedHuman)
        self.trackedHuman = -1


    def setALMemorySubscription(self, subscribe):
        self.subscribingLock.acquire()
        if subscribe:
            self.memory.subscribeToEvent('ALBasicAwareness/StimulusDetected', self.getName(), 'onStimulusDetected')
            self.memory.subscribeToEvent('ALBasicAwareness/HumanTracked', self.getName(), 'onHumanTracked')
            self.memory.subscribeToEvent('ALBasicAwareness/HumanLost', self.getName(), 'onHumanLost')
        else:
            self.memory.unsubscribeToEvent('ALBasicAwareness/StimulusDetected', self.getName())
            self.memory.unsubscribeToEvent('ALBasicAwareness/HumanTracked', self.getName())
            self.memory.unsubscribeToEvent('ALBasicAwareness/HumanLost', self.getName())

        self.subscribingLock.release()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts the Basic Awareness with the given Engagement and Tracking mode parameters, using the given stimuli." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the Basic Awareness." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Output name="StimulusDetected" type="3" type_size="1" nature="2" inner="0" tooltip="This output is stimulated when BasicAwareness detects a stimulus amongst the tracked stimulus.&#x0A;&#x0A;The output data is the stimulus&apos; name." id="5" />
                                                <Output name="HumanTracked" type="2" type_size="1" nature="2" inner="0" tooltip="This output is triggered when ALBasicAwareness detects a stimulus that is confirmed to be a human.&#x0A;&#x0A;The output data is the ID corresponding to the tracked human. It is shared with PeoplePerception and can be used there. This output is triggered with -1 if ALBasicAwareness tried to detect a human but failed." id="6" />
                                                <Output name="HumanLost" type="2" type_size="1" nature="2" inner="0" tooltip="This output is triggered when the human currently tracked is lost.&#x0A;&#x0A; The output data is the ID corresponding to the lost human. It can be reused in PeoplePerception." id="7" />
                                                <Parameter name="Engagement Mode" inherits_from_parent="0" content_type="3" value="Unengaged" default_value="Unengaged" custom_choice="0" tooltip='The engagement mode specifies how &quot;focused&quot; the robot is on the engaged person.' id="8">
                                                    <Choice value="Unengaged" />
                                                    <Choice value="FullyEngaged" />
                                                    <Choice value="SemiEngaged" />
                                                </Parameter>
                                                <Parameter name="Tracking Mode" inherits_from_parent="0" content_type="3" value="Head" default_value="Head" custom_choice="0" tooltip="The tracking mode describes how the robot keeps eye contact with an engaged person." id="9">
                                                    <Choice value="Head" />
                                                    <Choice value="BodyRotation" />
                                                    <Choice value="WholeBody" />
                                                </Parameter>
                                                <Parameter name="Sound Stimulus" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="10" />
                                                <Parameter name="Movement Stimulus" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="11" />
                                                <Parameter name="People Stimulus" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="12" />
                                                <Parameter name="Touch Stimulus" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="13" />
                                            </Box>
                                            <Box name="welcome" id="7" localization="8" tooltip="" x="270" y="40">
                                                <dialogFile>../welcome/welcome.dlg</dialogFile>
                                                <bitmap>media/images/box/box-dialog.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Output name="onPlay" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="NumericalHistory" id="6" localization="8" tooltip="this box content the flow diagram for the presentation of numerical revolution history" x="454" y="222">
                                                <bitmap>media/images/box/interaction/indark.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="Vision Reco._onStop" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                                                <Input name="learningFace_onStop" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                                                <Input name="learningFace_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="4" />
                                                <Output name="continue_onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="5" />
                                                <Output name="forceAnimation" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Output name="cancel" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Vision Reco." id="1" localization="8" tooltip="Recognize pictures, objects and locations which are known by the robot.&#x0A;&#x0A;Note: the robot needs to learn the picture, object or location to be able to recognize&#x0A;it. The learning process can be done through the Video Monitor (in Choregraphe&#x0A;menu, click on View, then Video Monitor)." x="451" y="388">
                                                                    <bitmap>media/images/box/interaction/reco.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                    <Output name="onPictureLabel" type="3" type_size="1" nature="2" inner="0" tooltip="Every time pictures/objects/locations are recognized, send the first picture recognized." id="5" />
                                                                    <Output name="onNoPicture" type="1" type_size="1" nature="2" inner="0" tooltip="No picture, object or location has been recognized." id="6" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Vision Reco." id="1" localization="8" tooltip="Recognize pictures, objects and locations which are already known by the robot.&#x0A;&#x0A;Note: the robot needs to learn the picture, object or location to be able to recognize&#x0A;it. The learning process can be done through the Video Monitor (in Choregraphe&#x0A;menu, click on View, then Video Monitor)." x="95" y="161">
                                                                                        <bitmap>media/images/box/interaction/reco.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Input name="PictureDetected" type="0" type_size="1" nature="4" stm_value_name="PictureDetected" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                                                        <Output name="onPictureLabel" type="0" type_size="1" nature="2" inner="0" tooltip="Every time pictures/objects/locations are recognized, send the result as&#x0A;[Picture_1, ..., Picture_N], with Picture_n = [label1,...,label_M]." id="6" />
                                                                                        <Output name="onNoPicture" type="1" type_size="1" nature="2" inner="0" tooltip="No picture, object or location has been recognized." id="7" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram>
                                                                                                        <Box name="Process Reco." id="3" localization="8" tooltip="Process picture detection extractor data (PictureDetected) to extract the labels of&#x0A;recognized pictures, objects and locations, and notify when there is nothing&#x0A;of these recognized.&#x0A;&#x0A;An output (either one or the other) is stimulated each time the recognized&#x0A;pictures, objects and locations change." x="188" y="60">
                                                                                                            <bitmap>media/images/box/interaction/reco.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nPicturesDetected = -1

    def onUnload(self):
        #puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(len(p) > 1):
            self.nPicturesDetected = len(p[1])
            labels = []
            for s in p[1]:
                labels.append(s[0])
            self.onPictureLabel( labels )
        else:
            if(self.nPicturesDetected != 0):
                self.nPicturesDetected = 0
                self.onNoPicture()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input. It must be the&#x0A;PictureDetected extractor data." id="2" />
                                                                                                            <Output name="onPictureLabel" type="0" type_size="1" nature="1" inner="0" tooltip="List of recognized pictures, objects and locations labels. It is sent regularly as&#x0A;long as they are recognized.&#x0A;&#x0A;For example, you could obtain this kind of result:&#x0A;[[&apos;cover&apos;, &apos;my book&apos;], [&apos;fridge corner&apos;, &apos;kitchen&apos;, &apos;my flat&apos;]]" id="3" />
                                                                                                            <Output name="onNoPicture" type="1" type_size="1" nature="1" inner="0" tooltip="No picture, object or location is recognized." id="4" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="6" outputowner="3" indexofoutput="3" />
                                                                                                        <Link inputowner="0" indexofinput="7" outputowner="3" indexofoutput="4" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="ConvertIntoStrings" id="3" localization="8" tooltip='Convert the array of recognized objects into several strings sent one after another.&#x0A;&#x0A;For example, if the array is:&#x0A;[[&quot;page 3&quot;, &quot;Harry Potter&quot;], [&quot;bed&quot;, &quot;bedroom&quot;, &quot;home&quot;]]&#x0A;Then the output will be stimulated first with:&#x0A;&quot;Harry Potter page 3&quot;&#x0A;And then with:&#x0A;&quot;home bedroom bed&quot;' x="285" y="49">
                                                                                        <bitmap>media/images/box/box-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        for element in p:
            element.reverse()
            newElement = ""
            for i in range(len(element)-1):
                newElement += str(element[i]) + " "
            if( len(element) > 0 ):
                newElement += str(element[len(element)-1])
            self.onStopped( newElement )
            self.logger.info( newElement )]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="7" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="6" />
                                                                                    <Link inputowner="0" indexofinput="5" outputowner="3" indexofoutput="3" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="learningFace" id="7" localization="8" tooltip="" x="197" y="264">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.session = qi.Session()
        self.session.connect("192.168.1.102:9559")

        self.memory = self.session.service("ALMemory")
        self.facedetected = self.session.service("ALFaceDetection")
        self.tts = ALProxy("ALAnimatedSpeech")
        self.peopePerception = self.session.service("ALPeoplePerception")
        self.tabletService = self.session.service('ALTabletService')

    def onLoad(self):
        self.signalID = 0
        #self.userNames = self.facedetected .getLearnedFacesList()
        self.counter = 0
        self.async = None

    def onUnload(self):
        #puts code for box cleanup here
        self.peopePerception.resetPopulation()

    def onTimeOut(self):
        self.say("ok! vous n'avez pas saisi votre nom!.")
        self.onInput_onStart()
        self.onUnload()

    def callback(self,int, value):
        if(value == ""):
            self.tts.say("Vous n'avez pas saisie de texte. veillez svp reprendre. Merci")
            self.onError()
            return
        self.async.cancel()
        # in case the button OK is press
        if int:
            self.tts.say("Merci!")
            #done = self.facedetected.learnFace(value)
            self.logger.info("---------------------username" + value)
            self.memory.insertData("UserName",value)
            #if(value in self.userNames):
                #self.tts.say("I think i have seen some one name" + value + " before!")

        # in case the button CANCEL is press
        else :
            self.tts.say("Ok!au revoir")
            #self.onInput_onStop()
        #disconnect from the signal to avoid repetition
        self.tabletService.onInputText.disconnect(self.signalID)
        self.logger.info("-----------------------")
        self.onStopped(value)


    def onInput_onStart(self):

        self.tts.say("Bonjour! je m'appelle ^start(animations/Stand/Gestures/Me_1) pepper! J'aimerais ^start(animations/Stand/Gestures/you_1) connaître comment vous vous appelez. vous pouvez m'indiquer votre nom en remplissant le champ de texte qui s'affiche actuellement sur ma tablette ^start(animations/Stand/Gestures/ShowTablet_2).")
        self.tabletService.showInputTextDialog("Entrez votre nom svp","VALIDER","SUPPRIMER","",10)
        self.async = qi.async(self.onTimeOut, delay=30 * 1000 * 1000)
        self.signalID = self.tabletService.onInputText.connect(self.callback)

    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Output name="ontimeOut" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                    <Output name="onError" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                </Box>
                                                                <Box name="inviteToPresentNumeric" id="8" localization="8" tooltip="" x="143" y="476">
                                                                    <dialogFile>presentation/presentation.dlg</dialogFile>
                                                                    <bitmap>media/images/box/box-dialog.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onPlay" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                </Box>
                                                                <Box name="continue" id="9" localization="8" tooltip="" x="919" y="292">
                                                                    <dialogFile>continue/continue.dlg</dialogFile>
                                                                    <bitmap>media/images/box/box-dialog.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onDialog" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                    <Output name="onCancel" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                </Box>
                                                                <Box name="switch" id="6" localization="8" tooltip="" x="468" y="58">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        self.tts = ALProxy("ALAnimatedSpeech")
        self.motion = ALProxy("ALMotion")
        global important_names
        important_names = []

    def onUnload(self):
        #put clean-up code here
        pass
    def lookInFront(self):
        names = ["HeadYaw", "HeadPitch"]
        angles  = [0.2, -0.2]
        fractionMaxSpeed  = 0.2
        self.motion.setAngles(names, angles, fractionMaxSpeed)

    def onInput_onStart(self,value):
        self.lookInFront()
        #self.onStopped() #activate the output of the box
        if (value == "Alan-Turing"):
            self.tts.say(" Il s'agit d'Alan Turing un mathématicien anglais, auteur des travaux qui fondent scientifiquement l'informatique. Il introduit les concepts de programme et de programmation.")
        elif(value == "Claude_Shannon"):
            self.tts.say("Il s'agit ici de Claude Shannon, ingénieur et mathématicien américain à la base de la théorie de l'information. Il donne un sens mathématique précis à la notion d'information, et pose les bases de la transmission de l'information.")
        elif(value == "JohnvonNeuman"):
            self.tts.say("ça c'est John fon Noïmann. Un mathématicien né à Budapest. Il est à l'origine de l'architecture de la majorité des ordinateurs modernes. ")
        elif(value == "Ada_Lovelace"):
            self.tts.say("Ada_Lovelace. Fille de Lord Byron, elle est une pionnière de la science informatique. Elle est principalement connue pour avoir réalisé le premier programme informatique.")
        elif(value == "Grace_Hopper"):
            self.tts.say("oh! Grace Hopper. Elle était une informaticienne américaine et amiral de la marine. Elle est notamment connue pour être la conceptrice du premier compilateur.")
        elif(value == "Margaret_Hamilton"):
            self.tts.say("Margaret Hamilton. Elle était une informaticienne et mathématicienne américaine, responsable de l'équipe chargée du développement du logiciel embarqué utilisé par les missions Apollo de la NASA.")
        elif(value == "Niklaus_Wirth"):
            important_names.append(value)
            self.tts.say("Nik claôs virt, un ingénieur Suisse. Il est à l'origine de plusieurs langage dont le langage de programmation pascal conçu pour l'enseignement.")
        elif(value == "Jean-Daniel"):
            important_names.append(value)
            self.tts.say("ça c'est Jean-Daniel Nicoud, un informaticien suisse, ancien professeur de l'EPFL. Il a invente notamment la première souris optique, commercialisée par la suite par Logitech en Californie.")
        else:
            self.tts.say("Désolée! Cette personne m'est inconnue")
        self.onStopped()

    def onInput_onStop(self):
        text = "Attendez! vous n'avez pas vu"
        if len(important_names) == 0:
                text += "Niklaus_Wirth et Jean-Daniel"
                self.tts.say("Attendez! vous n'avez pas vu Niklaus_Wirth et Jean-Daniel")
                self.onPropose()
        elif len(important_names) == 1:
            if(not "Niklaus_Wirth" in important_names):
                text += "Niklaus_Wirth"
            else:
                text += "Jean-Daniel"
            self.tts.say(text)
            self.onPropose()
        else:
            self.onUnload()
            self.goToGame()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Output name="goToGame" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                    <Output name="onPropose" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                </Box>
                                                                <Box name="Wait (1)" id="2" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="948" y="641">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy("ALTextToSpeech")
    def onLoad(self):
        self.waiting = None
        self.isTimeOut = False
        self.cancelWaiting()
    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.tts.say("Ok! Je vais stopper la présentation parce que je  n'ai eu aucune réponse.")
        self.isTimeOut = True
        self.timerOutput()


    def onInput_onDialog(self):
        if (self.isTimeOut):
            pass
        else:
            self.onDialogOut()
        self.cancelWaiting()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None
        self.isTimeout = False

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        self.cancelWaiting()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Input name="onDialog" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="5" />
                                                                    <Output name="onDialogOut" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="600" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="7" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="8" />
                                                                </Box>
                                                                <Box name="Wait (4)" id="11" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="310" y="663">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy("ALTextToSpeech")

    def onLoad(self):
        self.waiting = None
        self.cancelWaiting()
        self.isTimeOut = False

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.tts.say("Désolé! j'ai eu un petit problème technique. Veillez me montrer une séconde fois votre image! Merci")
        self.timerOutput()
        self.isTimeOut = True

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None
        self.isTimeOut = False

    def onInput_onVisioStart(self):
        if (self.isTimeOut):
            pass
        else:
            self.cancelWaiting()

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        self.cancelWaiting()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Input name="onVisioStart" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="5" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="20" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="6" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="7" />
                                                                </Box>
                                                                <Box name="Say" id="4" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="651" y="482">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                                                        <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                                    </Box>
                                                                                    <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="186" y="86">
                                                                                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : " مرحبا ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " Hello ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Je ne vois aucune image ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : " 你好 "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <arabic>
                                                                                                <![CDATA[مرحبا]]>
</arabic>
                                                                                            <czech>
                                                                                                <![CDATA[Ahoj]]>
</czech>
                                                                                            <danish>
                                                                                                <![CDATA[Hej]]>
</danish>
                                                                                            <german>
                                                                                                <![CDATA[Hallo]]>
</german>
                                                                                            <greek>
                                                                                                <![CDATA[]]>
</greek>
                                                                                            <english>
                                                                                                <![CDATA[Hello]]>
</english>
                                                                                            <spanish>
                                                                                                <![CDATA[Hola]]>
</spanish>
                                                                                            <finnish>
                                                                                                <![CDATA[Hei]]>
</finnish>
                                                                                            <french>
                                                                                                <![CDATA[Je ne vois aucune image]]>
</french>
                                                                                            <italian>
                                                                                                <![CDATA[Ciao]]>
</italian>
                                                                                            <japanese>
                                                                                                <![CDATA[こんにちは]]>
</japanese>
                                                                                            <korean>
                                                                                                <![CDATA[안녕하세요]]>
</korean>
                                                                                            <dutch>
                                                                                                <![CDATA[Hallo]]>
</dutch>
                                                                                            <norwegian>
                                                                                                <![CDATA[]]>
</norwegian>
                                                                                            <polish>
                                                                                                <![CDATA[Cześć]]>
</polish>
                                                                                            <brazilian>
                                                                                                <![CDATA[Olá]]>
</brazilian>
                                                                                            <portuguese>
                                                                                                <![CDATA[Olá]]>
</portuguese>
                                                                                            <russian>
                                                                                                <![CDATA[Привет]]>
</russian>
                                                                                            <swedish>
                                                                                                <![CDATA[Hallå]]>
</swedish>
                                                                                            <turkish>
                                                                                                <![CDATA[Merhaba]]>
</turkish>
                                                                                            <chinese>
                                                                                                <![CDATA[你好]]>
</chinese>
                                                                                            <language>8</language>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                                                        <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                                                                    </Box>
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                    <Resource name="Speech" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="HeadFixePosture" id="5" localization="8" tooltip="" x="558" y="582">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        self.motion = ALProxy('ALMotion')
        self.bIsRunning = False

    def onUnload(self):
        #put clean-up code here
        self.bIsRunning  = False



    def onInput_onStart(self):

        self.bIsRunning = True
        while self.bIsRunning:
            names = ["HeadYaw", "HeadPitch"]
            angles  = [0.2, -0.2]
            fractionMaxSpeed  = 0.2
            self.motion.setAngles(names, angles, fractionMaxSpeed)


    def onInput_onStop(self):
        self.onUnload()
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                </Box>
                                                                <Box name="presentSuisse" id="3" localization="8" tooltip="" x="749" y="102">
                                                                    <dialogFile>../presentSuisse/presentSuisse.dlg</dialogFile>
                                                                    <bitmap>media/images/box/box-dialog.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Output name="continue" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                </Box>
                                                                <Link inputowner="2" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="4" outputowner="9" indexofoutput="4" />
                                                                <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="1" indexofinput="3" outputowner="9" indexofoutput="5" />
                                                                <Link inputowner="9" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="7" indexofoutput="6" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="6" />
                                                                <Link inputowner="0" indexofinput="7" outputowner="9" indexofoutput="6" />
                                                                <Link inputowner="1" indexofinput="3" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="8" indexofoutput="4" />
                                                                <Link inputowner="11" indexofinput="2" outputowner="8" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="3" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="8" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="6" outputowner="2" indexofoutput="5" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="6" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="2" indexofoutput="6" />
                                                                <Link inputowner="6" indexofinput="3" outputowner="9" indexofoutput="5" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="6" indexofoutput="5" />
                                                                <Link inputowner="0" indexofinput="6" outputowner="7" indexofoutput="5" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="3" indexofoutput="5" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="6" indexofoutput="6" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="3" indexofoutput="5" />
                                                                <Link inputowner="2" indexofinput="4" outputowner="3" indexofoutput="5" />
                                                                <Link inputowner="11" indexofinput="4" outputowner="1" indexofoutput="5" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="HeadPosture" id="2" localization="8" tooltip="" x="184" y="432">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.motion = ALProxy("ALMotion")
    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        names = ["HeadYaw", "HeadPitch"]
        angles  = [0.2, -0.2]
        fractionMaxSpeed  = 0.2
        self.motion.setAngles(names, angles, fractionMaxSpeed)


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="Wait" id="3" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="169" y="187">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy("ALTextToSpeech")

    def onLoad(self):
        self.waiting = None
        self.isTimeOut = False

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.tts.say("Le temps imparti est écoulé! Buy Buy")
        self.isTimeOut = True
        self.timerOutput()

    def onInput_onDialog(self):
        self.logger.info("------------------ici ici")
        if (self.isTimeOut):
            pass
        else:
            self.onDialogOut()
        self.cancelWaiting()
    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Input name="onDialog" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="5" />
                                                <Output name="onDialogOut" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="20" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="7" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="8" />
                                            </Box>
                                            <Box name="SmileyGame" id="8" localization="8" tooltip="Enter description here" x="791" y="346">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="inviteToPlaySmileyGame_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                                                <Output name="Game_forceAnimation" type="1" type_size="1" nature="2" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                                                <Output name="inviteToPlaySmileyGame_onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="4" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Game" id="4" localization="8" tooltip="this box content the flow diagram for the game smiley. The robot try to recognise people emotions and show then via an image on his tablet." x="839" y="355">
                                                                    <bitmap>../../../../../Users/Henri/Pictures/Pepper/smileys.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="Get Expression_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                                                                    <Output name="forceAnimation" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Remove Data / Event" id="2" localization="8" tooltip="Remove the given key from NAOqi&apos;s shared memory." x="206" y="198">
                                                                                        <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self):
        self.memory.removeData(self.getParameter("key"))
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="4" />
                                                                                        <Parameter name="key" inherits_from_parent="0" content_type="3" value="Start_Smiley" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="5" />
                                                                                    </Box>
                                                                                    <Box name="Counter" id="3" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="391" y="199">
                                                                                        <bitmap>media/images/box/loop.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                                        <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                                        <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                                        <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                                        <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                                        <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                                        <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="2" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                                    </Box>
                                                                                    <Box name="If" id="6" localization="8" tooltip="Test a condition and stimulate the then or else outputs depending on the boolean&#x0A;value of the condition.&#x0A;The condition can be set in parameters." x="466" y="288">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onData(self, p):
        param = self.getParameter("Value to compare")
        try:
            p = float(p)
            param = float(param)
        except:
            p = str(p)
            param = str(param)
        operator = self.getParameter("Condition operator")
        if( operator == "<" ):
            self.outputTrueOrFalse( p < param )
        elif( operator == "< or =" ):
            self.outputTrueOrFalse( p <= param )
        elif( operator == "=" ):
            self.outputTrueOrFalse( p == param )
        elif( operator == "> or =" ):
            self.outputTrueOrFalse( p >= param )
        elif( operator == ">" ):
            self.outputTrueOrFalse( p > param )
        elif( operator == "≠" ):
            self.outputTrueOrFalse( p != param )
        else:
            raise Exception( "Operator not known: " + str(operator) )

    def outputTrueOrFalse(self, condition):
        if( condition ):
            self.output_then()
        else:
            self.output_else()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onData" type="0" type_size="1" nature="1" inner="0" tooltip="The data to test." id="2" />
                                                                                        <Output name="output_then" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent if the condition is true." id="3" />
                                                                                        <Output name="output_else" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent if the condition is false." id="4" />
                                                                                        <Parameter name="Condition operator" inherits_from_parent="0" content_type="3" value="=" default_value="≠" custom_choice="0" tooltip='Choose the condition operator.&#x0A;&#x0A;For example:&#x0A;If you choose &quot;&gt; or =&quot;, the condition will be: is the input is higher or equal&#x0A;than the parameter?' id="5">
                                                                                            <Choice value="&lt;" />
                                                                                            <Choice value="&lt; or =" />
                                                                                            <Choice value="=" />
                                                                                            <Choice value="&gt; or =" />
                                                                                            <Choice value="&gt;" />
                                                                                            <Choice value="≠" />
                                                                                        </Parameter>
                                                                                        <Parameter name="Value to compare" inherits_from_parent="0" content_type="3" value="2" default_value="0" custom_choice="0" tooltip="This is the value which is compared to the input value." id="6" />
                                                                                    </Box>
                                                                                    <Box name="Replay" id="7" localization="8" tooltip="" x="693" y="153">
                                                                                        <dialogFile>behavior_1/Replay/Replay.dlg</dialogFile>
                                                                                        <bitmap>media/images/box/box-dialog.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onDialog" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                        <Output name="onGameOver" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="onPlay" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                    </Box>
                                                                                    <Box name="Say" id="1" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="726" y="328">
                                                                                        <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                                        <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                                                                                        <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram>
                                                                                                        <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                                                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                                                        </Box>
                                                                                                        <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                                                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : " مرحبا ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " Faites une autre grimace ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " faites une autre grimace ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : " 你好 "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                                                                            </script>
                                                                                                            <pluginContent>
                                                                                                                <arabic>
                                                                                                                    <![CDATA[مرحبا]]>
</arabic>
                                                                                                                <czech>
                                                                                                                    <![CDATA[Ahoj]]>
</czech>
                                                                                                                <danish>
                                                                                                                    <![CDATA[Hej]]>
</danish>
                                                                                                                <german>
                                                                                                                    <![CDATA[Hallo]]>
</german>
                                                                                                                <greek>
                                                                                                                    <![CDATA[]]>
</greek>
                                                                                                                <english>
                                                                                                                    <![CDATA[Faites une autre grimace]]>
</english>
                                                                                                                <spanish>
                                                                                                                    <![CDATA[Hola]]>
</spanish>
                                                                                                                <finnish>
                                                                                                                    <![CDATA[Hei]]>
</finnish>
                                                                                                                <french>
                                                                                                                    <![CDATA[faites une autre grimace]]>
</french>
                                                                                                                <italian>
                                                                                                                    <![CDATA[Ciao]]>
</italian>
                                                                                                                <japanese>
                                                                                                                    <![CDATA[こんにちは]]>
</japanese>
                                                                                                                <korean>
                                                                                                                    <![CDATA[안녕하세요]]>
</korean>
                                                                                                                <dutch>
                                                                                                                    <![CDATA[Hallo]]>
</dutch>
                                                                                                                <norwegian>
                                                                                                                    <![CDATA[]]>
</norwegian>
                                                                                                                <polish>
                                                                                                                    <![CDATA[Cześć]]>
</polish>
                                                                                                                <brazilian>
                                                                                                                    <![CDATA[Olá]]>
</brazilian>
                                                                                                                <portuguese>
                                                                                                                    <![CDATA[Olá]]>
</portuguese>
                                                                                                                <russian>
                                                                                                                    <![CDATA[Привет]]>
</russian>
                                                                                                                <swedish>
                                                                                                                    <![CDATA[Hallå]]>
</swedish>
                                                                                                                <turkish>
                                                                                                                    <![CDATA[Merhaba]]>
</turkish>
                                                                                                                <chinese>
                                                                                                                    <![CDATA[你好]]>
</chinese>
                                                                                                                <language>8</language>
                                                                                                            </pluginContent>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                                                                            <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                        <Resource name="Speech" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Wait" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="496" y="16">
                                                                                        <bitmap>media/images/box/wait.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy("ALTextToSpeech")
    def onLoad(self):
        self.waiting = None
        self.isTimeOut = False

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.tts.say("Je n'ai eu aucune réponse.")
        self.isTimeOut = True
        self.timerOutput()

    def onInput_onDialog(self):
        if (self.isTimeOut):
            pass
        else:
            self.onDialogOut()
        self.cancelWaiting()

    def onInput_onPlay(self):
        if (self.isTimeOut):
            pass
        else:
            self.onDialogOut()
        self.cancelWaiting()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None
        self.isTimeOut = False

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                        <Input name="onDialog" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Input name="onPlay" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                        <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="5" />
                                                                                        <Output name="onDialogOut" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                        <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="20" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="8" />
                                                                                        <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="9" />
                                                                                    </Box>
                                                                                    <Box name="HeadPosture" id="8" localization="8" tooltip="" x="206" y="370">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        self.motion = ALProxy('ALMotion')

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        names = ["HeadYaw", "HeadPitch"]
        angles  = [0.2, -0.2]
        fractionMaxSpeed  = 0.2
        self.motion.setAngles(names, angles, fractionMaxSpeed)


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="Get Expression (1)" id="9" localization="8" tooltip="This box returns the detected facial expression of the person in front of the robot.&#x0A;The detection fails when there are more or less than one person in front of the robot or when the timeout is exceeded.&#x0A;&#x0A;It is possible to set up the Confidence Threshold and the Timeout parameters for this box. &#x0A;Furthermore it is possible to select the required emotions:&#x0A;- neutral&#x0A;- happy&#x0A;- surprised&#x0A;- angry&#x0A;- sad" x="267" y="63">
                                                                                        <bitmap>media/images/box/interaction/emotion.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        try:
            self.faceC = ALProxy("ALFaceCharacteristics")
            self.memory = ALProxy("ALMemory")
        except Exception as e:
            raise RuntimeError(str(e) + "Make sure you're not connected to a virtual robot." )


    def onLoad(self):
        self.confidence = self.getParameter("Confidence Threshold")
        self.threshNeutralEmotion = self.confidence + 0.15
        self.threshHappyEmotion = self.confidence
        self.threshSurprisedEmotion = self.confidence + 0.05
        self.threshAngryEmotion = self.confidence + 0.2
        self.threshSadEmotion = self.confidence + 0.15
        self.emotions = ["neutral", "happy", "surprised", "angry", "sad"]
        self.counter = 0
        self.bIsRunning = False
        self.delayed = []
        self.errorMes = ""
        self.lastPlayer = ""
        #get frame to display images.If an error occur, we display it in the console
        self.frameManager = None
        try:
            self.frameManager = ALProxy("ALFrameManager")
        except Exception as e:
            self.logger.error(e)
        self.ttx = ALProxy("ALTextToSpeech")

    def onUnload(self):
        self.counter = 0
        self.tProperties = [0,0,0,0,0]
        self.bIsRunning = False
        self.cancelDelays()
    def traduction(self, text):
        if(text == "neutral"):
            return "neutre"
        elif(text == "happy"):
            return "joyeux"
        elif(text == "surprised"):
            return "étonné"
        elif(text == "angry"):
            return "fâché"
        else:
            return "triste"
    #this method is used to get the service ALTabletService which allow the use of the robot tablet.   If an error occur, we display it on the console.the tablet service is return.
    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    #this method is use to get absolute url of the image to be display on the robot screen.It take in parameter the current objet and the relative url.
    def _getAbsoluteUrl(self, partial_url):
        import os
        subPath = os.path.join(self.packageUid(), os.path.normpath(partial_url).lstrip("\\/"))
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        return "http://%s/apps/%s" %(self._getTabletService().robotIp(), subPath.replace(os.path.sep, "/"))

    def onInput_onStart(self):

        self.ttx.say("Regardez sur l'écran de ma tablette et quand vous serez prêt, cliquez sur start")
        tabletService = ALProxy('ALTabletService')
        # load Application
        uid = self.packageUid()
        tabletService.loadApplication(uid)
        id = tabletService.showWebview()
        self.code = 0
        for x in range(0, 10):
            try :
                self.code = self.memory.getData("Start_Smiley")
                self.logger.info("game start code " + str(self.code))
                if(self.code == 1):
                    break
            except Exception as err:
                self.logger.error("My Error: %s " % err)
            time.sleep(5)
        url = "images/"
        default_url = self._getAbsoluteUrl(url + "HEIG_LOGO.png")
        try:
            self.ttx.say("Un moment s'il vous plaît")
            #start timer
            import qi
            import functools
            delay_future = qi.async(self.onTimeout, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
            self.delayed.append(delay_future)
            bound_clean = functools.partial(self.cleanDelay, delay_future)
            delay_future.addCallback(bound_clean)

            self.tProperties = [0,0,0,0,0]
            self.bIsRunning = True
            last_exp = ""
            while self.bIsRunning:
                if self.counter < 4:
                    try:
                        #identify user
                        ids = ALMemory.getData("PeoplePerception/PeopleList")
                        if len(ids) == 0:
                            self.errorMes = "No face detected"
                            self.onUnload()
                        elif len(ids) > 1:
                            self.errorMes = "Multiple faces detected"
                            self.onUnload()
                        else:
                            #analyze age properties
                            self.faceC.analyzeFaceCharacteristics(ids[0])
                            time.sleep(0.2)
                            properties = ALMemory.getData("PeoplePerception/Person/"+str(ids[0])+"/ExpressionProperties")
                            self.tProperties[0] += properties[0]
                            self.tProperties[1] += properties[1]
                            self.tProperties[2] += properties[2]
                            self.tProperties[3] += properties[3]
                            self.tProperties[4] += properties[4]
                            self.counter += 1
                    except:
                        ids = []
                else:
                    self.counter = 0
                    recognized = [0,0,0,0,0]
                    #calculate mean value for neutral, happy, surprised, angry or sad
                    self.tProperties[0] /= 4
                    self.tProperties[1] /= 4
                    self.tProperties[2] /= 4
                    self.tProperties[3] /= 4
                    self.tProperties[4] /= 4

                    if self.getParameter("neutral") and self.tProperties[0] > self.threshNeutralEmotion:
                        recognized[0] = self.tProperties[0]
                    if self.getParameter("happy") and self.tProperties[1] >self.threshHappyEmotion:
                        recognized[1] = self.tProperties[1]
                    if self.getParameter("surprised") and self.tProperties[2] > self.threshSurprisedEmotion:
                        recognized[2] = self.tProperties[2]
                    if self.getParameter("angry") and self.tProperties[3] > self.threshAngryEmotion:
                        recognized[3] = self.tProperties[3]
                    if self.getParameter("sad") and self.tProperties[4] > self.threshSadEmotion:
                        recognized[4] = self.tProperties[4]

                    self.tProperties = [0,0,0,0,0]
                    try:
                        if recognized != [0,0,0,0,0]:
                            emotion = self.emotions[recognized.index(max(recognized))]
                            self.logger.info("emotion = " + emotion)
                            if(emotion == "surprised"):
                                url += "surprise"

                            else:
                                url += emotion

                            if tabletService:

                                try:

                                    url += ".png"

                                    self.logger.info(url)

                                    if url == '':
                                        self.logger.error("URL of the image is empty")
                                    if not url.startswith('http'):

                                        url = self._getAbsoluteUrl(url)

                                    tabletService.post.showImage(url)
                                    if(last_exp == emotion):
                                        self.ttx.say("vous êtes toujours " + self.traduction(last_exp))
                                    else:
                                        self.ttx.say("vous êtes " + self.traduction(emotion))
                                    url = "images/"
                                    tabletService.post.showImage(default_url)

                                except Exception as err:
                                    self.logger.error("Error during ShowImage : %s " % err)

                            else:
                                self.logger.warning("No ALTabletService, can't display the image.")
                                self.onStopped()
                        else:
                            emotion = None
                    except:
                        self.errorMes = "Get expression errorrrrrr"
                        emotion = None
                    try:
                        ALMemory.removeData("PeoplePerception/Person/"+str(ids[0])+"/ExpressionProperties")
                    except:

                        self.errorMes = "Error when removing person expression from memory"
                    if emotion != None:
                        last_exp = emotion
                        self.logger.info("reach here" )
                        self.onStopped(emotion)

            raise RuntimeError(self.errorMes)
        except Exception as e:
            raise RuntimeError(str(e))
            self.onUnload()


    def onTimeout(self):
        self.errorMes = "Timeout"
        self.onUnload()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip='Returns the facial expression of the person in front of the robot. &#x0A;- &quot;neutral&quot;&#x0A;- &quot;happy&quot;&#x0A;- &quot;surprised&quot;&#x0A;- &quot;angry&quot;&#x0A;- &quot;sad&quot;&#x0A;&#x0A;Tip:&#x0A;Connect this output to a &quot;Switch Case&quot; box containing the possible output values as strings. In this way you can trigger different paths in your behavior depending on the output.' id="4" />
                                                                                        <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip='Triggered when gender detection failed. &#x0A;Possible error messages:&#x0A;- &quot;No face detected&quot;&#x0A;- &quot;Multiple faces detected&quot;&#x0A;- &quot;Timeout&quot;' id="5" />
                                                                                        <Parameter name="Confidence Threshold" inherits_from_parent="0" content_type="2" value="0.35" default_value="0.6" min="0" max="1" tooltip="Set the confidence threshold for the age detection." id="6" />
                                                                                        <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="55.9589" default_value="5" min="1" max="60" tooltip="" id="7" />
                                                                                        <Parameter name="neutral" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="8" />
                                                                                        <Parameter name="happy" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="9" />
                                                                                        <Parameter name="surprised" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="10" />
                                                                                        <Parameter name="angry" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="11" />
                                                                                        <Parameter name="sad" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="12" />
                                                                                    </Box>
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="6" indexofoutput="3" />
                                                                                    <Link inputowner="6" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="3" outputowner="4" indexofoutput="7" />
                                                                                    <Link inputowner="0" indexofinput="3" outputowner="4" indexofoutput="5" />
                                                                                    <Link inputowner="4" indexofinput="3" outputowner="7" indexofoutput="4" />
                                                                                    <Link inputowner="0" indexofinput="3" outputowner="7" indexofoutput="5" />
                                                                                    <Link inputowner="4" indexofinput="4" outputowner="7" indexofoutput="6" />
                                                                                    <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="9" indexofinput="3" outputowner="6" indexofoutput="3" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="9" indexofoutput="4" />
                                                                                    <Link inputowner="9" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                                                    <Link inputowner="9" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="4" indexofoutput="6" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="6" indexofoutput="3" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="inviteToPlaySmileyGame" id="1" localization="8" tooltip="" x="706" y="326">
                                                                    <dialogFile>../invitation/invitation.dlg</dialogFile>
                                                                    <bitmap>media/images/box/box-dialog.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Output name="onPlay" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                </Box>
                                                                <Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="3" outputowner="4" indexofoutput="3" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Link inputowner="0" indexofinput="5" outputowner="8" indexofoutput="3" />
                                            <Link inputowner="0" indexofinput="5" outputowner="6" indexofoutput="6" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="5" outputowner="7" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="4" outputowner="7" indexofoutput="5" />
                                            <Link inputowner="0" indexofinput="5" outputowner="3" indexofoutput="5" />
                                            <Link inputowner="6" indexofinput="4" outputowner="3" indexofoutput="6" />
                                            <Link inputowner="0" indexofinput="6" outputowner="6" indexofoutput="7" />
                                            <Link inputowner="8" indexofinput="2" outputowner="6" indexofoutput="5" />
                                            <Link inputowner="0" indexofinput="5" outputowner="8" indexofoutput="4" />
                                            <Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="PeopleDetection" id="1" localization="8" tooltip="this box is people detection box.its rule  is to command actions of others boxes depending on if people have been detected or not. That means, at least some one have been detected, it send a signal to H-M_interaction box in order to start interaction between the robot and humans. If not, it just lunch some animations in order to pass time and wait for people to come." x="138" y="164">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

        self.tts = ALProxy('ALTextToSpeech')
        self.tts.setLanguage("French")
        #get memory module
        self.memory = ALProxy("ALMemory")
        # Get the module AlPeoplePerception.
        self.people_detection = ALProxy("ALPeoplePerception")
        self.reset()

    def onLoad(self):
         #subscription to PeoplePerception event
        self.memory.subscribeToEvent("PeoplePerception/VisiblePeopleList", self.getName(), "onPeopleChanged")



    def reset(self):
        self.peopleList = []
        self.running = True
        self.asyncTask = None
        self.animationSet = True
        self.canChangeMode = True
        self.async = None

    def onUnload(self):
        #puts code for box cleanup here
        self.memory.unsubscribeToEvent("PeoplePerception/VisiblePeopleList", self.getName())
        self.running = False


    def onActivateAnimation(self):
        if (self.running):
            self.logger.info("***********animations !")
            #self.tts.say("debut de l'animation")
            self.canChangeMode = False
            self.animationSet = True
            self.interactionStop()
            self.animationActivation()
            self.asyncTask = qi.async(self.finished, delay=10 * 1000 * 1000)

    def onActivateInteraction(self):
        if (self.running):
            self.logger.info("*********** interaction !")
            #self.tts.say("debut de l'interaction")
            self.canChangeMode = False
            self.animationSet = False
            self.animationStop()
            self.interactionActivation()

    def onInput_forceAnimation(self):
        if (self.asyncTask != None):
            self.asyncTask.cancel()
        self.reset()
        self.onActivateAnimation()

    def finished(self):
        self.logger.info("***********---TIMEOUT FINISHED")
        self.canChangeMode = True
        self.logger.info("len : " + str(len(self.peopleList)) + ", animationSet: " + str(self.animationSet))
        if (len(self.peopleList) == 0 and not(self.animationSet)):
            self.onActivateAnimation()
        elif(len(self.peopleList)>0 and self.animationSet):
            self.onActivateInteraction()
        else:
            self.logger.info("else !")
            self.onActivateAnimation()

    def onInput_onStart(self):
        self.onActivateAnimation()



    def onPeopleChanged(self,eventName,list,identifier):
        self.logger.info("***********je vois des personnes")
        self.peopleList = list
        self.logger.info(len(self.peopleList))
        self.logger.info("**********" + str(self.canChangeMode))
        if(len(list)== 0 and not(self.animationSet) and self.canChangeMode):
            self.onActivateAnimation()
        elif(len(list > 0) and self.canChangeMode):
            self.onActivateInteraction()
        else:
            self.onActivateAnimation()

    def onInput_onStop(self):
        pass]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="forceAnimation" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                            <Output name="animationActivation" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                            <Output name="animationStop" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                            <Output name="interactionActivation" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                            <Output name="interactionStop" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                        </Box>
                        <Box name="animations" id="2" localization="8" tooltip="this box content some animations that pepper do in absence of human presence. " x="382" y="71">
                            <bitmap>media/images/box/movement/animation_mode.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[from random import randint
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.motion = ALProxy("ALMotion")
        self.alBehaviorManager = ALProxy("ALBehaviorManager")

    def onLoad(self):
        self.running = True
        #put initialization code here
        self.animations = ["animations/Stand/Gestures/Please_1",
                            "animations/Stand/Emotions/Positive/Peaceful_1",
                            "animations/Stand/Waiting/Think_1",
                            "animations/Stand/Waiting/ShowSky_1"
                            ]

    def launchRandomAnimation(self):
        if (self.running):
            # self.bm.stopAllBehaviors()
            try:

                behavior = self.animations[randint(0, len(self.animations ) - 1)]
                self.logger.info("LAUNCHING ANIMATION " + behavior)
                self.alBehaviorManager.runBehavior(behavior)

            except Exception as e:
                self.logger.error("ERROR: " + str(e))

    def onUnload(self):
        #put clean-up code here
        self.running = False

    def onInput_onStart(self):
        #self.async = qi.async(self.launchRandomAnimation, delay=2*1000*1000)
        #self.animationSet = False
        self.running = True
        self.launchRandomAnimation()
    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        </Box>
                        <Box name="HeadPosture" id="3" localization="8" tooltip="" x="148" y="47">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        self.motion = ALProxy('ALMotion')

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        names = ["HeadYaw", "HeadPitch"]
        angles  = [0.2, -0.2]
        fractionMaxSpeed  = 0.2
        self.motion.setAngles(names, angles, fractionMaxSpeed)


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        </Box>
                        <Link inputowner="8" indexofinput="2" outputowner="1" indexofoutput="8" />
                        <Link inputowner="8" indexofinput="3" outputowner="1" indexofoutput="9" />
                        <Link inputowner="1" indexofinput="4" outputowner="8" indexofoutput="5" />
                        <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="6" />
                        <Link inputowner="2" indexofinput="3" outputowner="1" indexofoutput="7" />
                        <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
