<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                        <Box name="test" id="1" localization="8" tooltip="" x="92" y="131">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        # Get the module for speech.
        self.tts = ALProxy('ALTextToSpeech')
        # Get the module ALFaceDetection.
        self.people_detection = ALProxy("ALPeoplePerception")
        self.people_detection.resetPopulation()
        # Connect the event callback.
        #global memory
        self.memory = ALProxy("ALMemory")
        self.memory.subscribeToEvent("PeoplePerception",
            "HumanGreeter",
            "onPeopleDetected")

    def onPeopleDetected(self):
        self.tts.say("event function")

    def onLoad(self):
        #put initialization code here
        self.people_detection.setTimeBeforeVisiblePersonDisappears(20.0)
        self.people_detection.resetPopulation()

    def onUnload(self):
        #put clean-up code here
        self.people_detection.resetPopulation()
       # self.memory.unsubscribeToEvent("PeoplePerception/PeopleDetected","ALPeoplePerception")

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box

        #callback for people tracked
        val = self.memory.getData("PeoplePerception/PeopleDetected")
        if (val and isinstance(val, list) and len(val) >= 2):

            if (len(val[1])==1):
                #one person is detected; the robot goes towards him
                self.tts.say("Hello you")
                self.logger.info(str(val[1]))
                #display the dress color of every person detected
                for person in val[1]:
                    #we get the person id
                    id = person[0]
                    self.logger.info("person id*** " + str(id))


                    #list_carac = ["PeoplePerception/Person/" + str(id) + "/PresentSince","PeoplePerception/Person/" + str(id) + "/ShirtColor","PeoplePerception/Person/" + str(id) + "/RealHeight"]

                    #result = self.memory.getListData(list_carac)


                    #find his presence since infront of the robot
                    #mem_key = "PeoplePerception/Person/" + str(id) + "/RealHeight"

                    #find his dress color in the memory
                    #mem_key = "PeoplePerception/Person/" + str(id) + "/RealHeight"
                    #self.logger.info(str(mem_key))
                    #person_height = self.memory.getData(mem_key)
                    presence_since = self.memory.getData("PeoplePerception/Person/" + str(id) + "/PresentSince")
                    shirt_color = self.memory.getData("PeoplePerception/Person/" + str(id) + "/ShirtColor")
                    person_height = self.memory.getData("PeoplePerception/Person/" + str(id) + "/RealHeight")

                    self.logger.info("****" + str(person_height))
                    if(person_height > 1.70):
                        self.tts.say("oh! you are very tall!")
                    else :
                        self.tts.say("you are not too much tall!")

                    self.logger.info("you have" + str(person_height) + "meter")
                    height = str(person_height)
                    self.tts.say("you have" + height[:4]  + "meter")
            else :
                #many people are detected
                self.tts.say("Hi every body!")
        else:
            self.tts.say("no one detected")


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        </Box>
                        <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
